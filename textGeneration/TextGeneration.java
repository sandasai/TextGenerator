package textGeneration;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class TextGeneration {
	private static MyHashMap<String,Markov> subStrings;
	private static String startString;
	private static String fileName;
	
	/**
	 * Runs a text generation program that generates pseudo-random text based on text patterns of an input file
	 * A character is generated by examining the previous X characters and randomly selecting a subsequent character
	 * based upon the frequency it appears after those previous X characters.
	 * @param args  0 - The number of characters the algorithm will consider
	 * 				1 - The total number of characters to generate
	 * 				2 - A sample text file to read text patterns from
	 */
	public static void main(String[] args) {
		final int k = Integer.parseInt(args[0]); //How many characters to look back on
		final int m = Integer.parseInt(args[1]); //Total number of characters to output
		fileName = args[2];
		File file = new File(fileName);
		
		try {
			Scanner scanner = new Scanner(file);
			subStrings = new MyHashMap<String,Markov>();
			processText(scanner, k);
			generate(k, m);
		}
		catch(FileNotFoundException e) {
			System.out.println("Enter a valid file name");
		}
	}
	
	private static void processText(Scanner scanner, final int k) {
		scanner.useDelimiter("");
		String prev = "";
		char c;
		while(scanner.hasNext()) {
			c = scanner.next().charAt(0); //get the next character
			if (prev.length() < k) {
				//only for the first k characters of the file
				prev += c;
			} else {
				//save off the start string
				if (startString == null) {
					startString = prev;
				}
				//save off in markov with the suffix character
				if (!subStrings.containsKey(prev)) {
					subStrings.put(new String(prev), new Markov(prev));
				}
				subStrings.get(prev).add(c);

				//update previous str with the next character
				prev = prev.substring(1, k) + c;
			}

		}
	}
	
	public static void generate(final int k, final int m) {
		BufferedWriter bw = null;
		FileWriter fw = null;
		try {
			fw = new FileWriter("out_" + fileName);
			bw = new BufferedWriter(fw);
			
			//put the starting string in first
			String prev = startString;
			bw.write(startString);
			for (int i = startString.length(); i < m; i++) {
				//if previous string can't be found, reset to start
				if (!subStrings.containsKey(prev)) {
					prev = startString;
				}
				char c = subStrings.get(prev).random();
				bw.write(c);
				prev = prev.substring(1, k) + c;
			}
			bw.write("\n");
		} catch (IOException e) {
			e.printStackTrace();
		} 
		finally {
			try {
				if (bw != null)
					bw.close();
				if (fw != null)
					fw.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}
}
